/**********************************************************************
 *  Copyright (c) 2008-2016, Alliance for Sustainable Energy.
 *  All rights reserved.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 **********************************************************************/

#ifndef MODEL_AIRFLOWNETWORKSIMULATIONCONTROL_IMPL_HPP
#define MODEL_AIRFLOWNETWORKSIMULATIONCONTROL_IMPL_HPP

#include <model/ParentObject_Impl.hpp>
#include <model/ModelObject_Impl.hpp>

#include <utilities/units/Quantity.hpp>
#include <utilities/units/OSOptionalQuantity.hpp>

namespace openstudio {
namespace model {

// class ZoneAirContaminantBalance;

namespace detail {

class MODEL_API AirflowNetworkSimulationControl_Impl : public ParentObject_Impl {
  //Q_OBJECT;
  //Q_PROPERTY(boost::optional<std::string> airflowNetworkControl READ airflowNetworkControl WRITE setAirflowNetworkControl);
  //Q_PROPERTY(boost::optional<std::string> windPressureCoefficientType READ windPressureCoefficientType WRITE setWindPressureCoefficientType);
  // TODO: Add relationships for objects related to this one, but not pointed to by the underlying data.
  //       Such relationships can be generated by the GenerateRelationships.rb script.
public:

  /** @name Constructors and Destructors */
  //@{

  // constructor
  AirflowNetworkSimulationControl_Impl(const IdfObject& idfObject,
    Model_Impl* model,
    bool keepHandle);

  // construct from workspace
  AirflowNetworkSimulationControl_Impl(const openstudio::detail::WorkspaceObject_Impl& other,
    Model_Impl* model,
    bool keepHandle);

  // copy constructor
  AirflowNetworkSimulationControl_Impl(const AirflowNetworkSimulationControl_Impl& other,
    Model_Impl* model,
    bool keepHandle);

  // virtual destructor
  virtual ~AirflowNetworkSimulationControl_Impl();

  //@}
  /** @name Getters */
  //@{

  // return the parent object in the hierarchy
  virtual boost::optional<ParentObject> parent() const;

  // return any children objects in the hierarchy
  virtual std::vector<ModelObject> children() const;

  /// get a vector of allowable children types
  virtual std::vector<IddObjectType> allowableChildTypes() const;

  // Get all output variable names that could be associated with this object.
  virtual const std::vector<std::string>& outputVariableNames() const;

  virtual IddObjectType iddObjectType() const;

  boost::optional<std::string> airflowNetworkControl() const;
  bool isAirflowNetworkControlDefaulted() const;
  //boost::optional<std::string> windPressureCoefficientType() const;
  // Skipping AirflowNetworkWindPressureCoefficientArrayName
  //boost::optional<std::string> heightSelectionforLocalWindPressureCalculation() const;
  boost::optional<std::string> buildingType() const;
  bool isBuildingTypeDefaulted() const;
  boost::optional<int> maximumNumberofIterations() const;
  bool isMaximumNumberofIterationsDefaulted() const;
  boost::optional<std::string> initializationType() const;
  bool isInitializationTypeDefaulted() const;
  boost::optional<double> relativeAirflowConvergenceTolerance() const;
  bool isRelativeAirflowConvergenceToleranceDefaulted() const;
  boost::optional<double> absoluteAirflowConvergenceTolerance() const;
  bool isAbsoluteAirflowConvergenceToleranceDefaulted() const;
  boost::optional<double> convergenceAccelerationLimit() const;
  bool isConvergenceAccelerationLimitDefaulted() const;
  boost::optional<double> azimuthAngleofLongAxisofBuilding() const;
  bool isAzimuthAngleofLongAxisofBuildingDefaulted() const;
  boost::optional<double> buildingAspectRatio() const;
  bool isBuildingAspectRatioDefaulted() const;
  boost::optional<std::string> networkBuildType() const;
  bool isNetworkBuildTypeDefaulted() const;

  //@}
  /** @name Setters */
  //@{

  bool setAirflowNetworkControl(std::string airflowNetworkControl);
  void resetAirflowNetworkControl();
  //bool setWindPressureCoefficientType(boost::optional<std::string> type);
  //bool setWindPressureCoefficientType(std::string type);
  // Skipping AirflowNetworkWindPressureCoefficientArrayName
  //bool setHeightSelectionforLocalWindPressureCalculation(boost::optional<std::string> height);
  //bool setHeightSelectionforLocalWindPressureCalculation(std::string height);
  bool setBuildingType(std::string type);
  void resetBuildingType();
  bool setMaximumNumberofIterations(int number);
  void resetMaximumNumberofIterations();
  bool setInitializationType(std::string type);
  void resetInitializationType();
  bool setRelativeAirflowConvergenceTolerance(double tolerance);
  void resetRelativeAirflowConvergenceTolerance();
  bool setAbsoluteAirflowConvergenceTolerance(double tolerance);
  void resetAbsoluteAirflowConvergenceTolerance();
  bool setConvergenceAccelerationLimit(double limit);
  void resetConvergenceAccelerationLimit();
  bool setAzimuthAngleofLongAxisofBuilding(double angle);
  void resetAzimuthAngleofLongAxisofBuilding();
  bool setBuildingAspectRatio(double ratio);
  void resetBuildingAspectRatio();
  bool setNetworkBuildType(std::string type);
  void resetNetworkBuildType();
  //@}

private:
  REGISTER_LOGGER("openstudio.model.AirflowNetworkSimulationControl");

  //openstudio::Quantity loadsConvergenceToleranceValue_SI() const;
  //openstudio::Quantity loadsConvergenceToleranceValue_IP() const;
  //openstudio::Quantity temperatureConvergenceToleranceValue_SI() const;
  //openstudio::Quantity temperatureConvergenceToleranceValue_IP() const;
  //std::vector<std::string> solarDistributionValues() const;
};

} // detail

} // model
} // openstudio

#endif // MODEL_AIRFLOWNETWORKSIMULATIONCONTROL_IMPL_HPP
