/**********************************************************************
*  Copyright (c) 2008-2014, Alliance for Sustainable Energy.
*  All rights reserved.
*
*  This library is free software; you can redistribute it and/or
*  modify it under the terms of the GNU Lesser General Public
*  License as published by the Free Software Foundation; either
*  version 2.1 of the License, or (at your option) any later version.
*
*  This library is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*  Lesser General Public License for more details.
*
*  You should have received a copy of the GNU Lesser General Public
*  License along with this library; if not, write to the Free Software
*  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
**********************************************************************/

#ifndef CONTAM_FORWARDTRANSLATOR_HPP
#define CONTAM_FORWARDTRANSLATOR_HPP

#include "AirflowAPI.hpp"

//#include "../model/Model.hpp"
#include "../utilities/idf/Handle.hpp"
#include "../utilities/core/Path.hpp"
#include "../utilities/core/Optional.hpp"
#include "../utilities/core/Logger.hpp"
#include "../utilities/core/StringStreamLogSink.hpp"
//#include <utilities/data/TimeSeries.hpp>
//#include <utilities/time/Date.hpp>
//#include <utilities/filetypes/EpwFile.hpp>

namespace openstudio{
class ProgressBar;

namespace model {
class Model;
class ModelObject;
class Surface;
}

namespace airflow{

/** ForwardTranslator translates an OpenStudio model into a CONTAM model.
 *
 *  ForwardTranslator translates an OpenStudio energy model into a CONTAM
 *  airflow model using a streamlined approach. Each wall is assigned an
 *  overall leakage rate and individual components are not directly represented.
 *
 */
class AIRFLOW_API SpaceLinker
{
public:
  /** @name Constructors and Destructors */
  //@{
  /** Construct a new object. */
  SpaceLinker();
  /** Destroy the translator.*/
  ~SpaceLinker(){}

  //@}
  /** @name Translation Functions */
  //@{

  //bool SpaceLinker::run(model::Model model);

  /** Translates an OpenStudio thermal model into a CONTAM airflow model. */
  //boost::optional<contam::IndexModel> translateModel(model::Model model);
  
  /** Static translation function to translate an OpenStudio into a CONTAM airflow model and write it to a path. */
  //static bool modelToPrj(const openstudio::model::Model& model, const openstudio::path& path,
  //  bool translateHVAC=true, std::string leakageDescriptor="Average", ProgressBar* progressBar=NULL);

  //@}
  /** @name Surface-Finding Functions */
  //@{

  std::vector<openstudio::model::Surface> getInteriorZoneSurfaces(openstudio::model::Model & model);
  std::vector<openstudio::model::Surface> getExteriorZoneSurfaces(openstudio::model::Model & model);

  //@}
  /** @name Getters and Setters */
  //@{

  //@}
  /** @name Miscellaneous Functions */
  //@{

  /** Returns warning messages generated by the last translation. */
  std::vector<LogMessage> warnings() const;

  /** Returns error messages generated by the last translation. */
  std::vector<LogMessage> errors() const;

  //@}

private:
  /*
  // Do the work to set up the leakage paths
  bool applyExteriorFlowRate(contam::IndexModel prjModel);
  bool applyAirtightnessLevel(contam::IndexModel prjModel);

  // Convenience function to add a new one-point test airflow element to the model
  int addNewAirflowElement(contam::IndexModel model,std::string name,double flow,double n=0.65,double deltaP=75.0);

  // Clear out the translator and reset to the defaults
  void clear();

  // Really need to look at these and determine if they are really needed
  int tableLookup(QMap<std::string,int> map, std::string str, const char *name);
  int tableLookup(QMap<Handle,int> map, Handle handle, const char *name);
  int tableLookup(std::map<Handle,int> map, Handle handle, const char *name);
  std::string reverseLookup(QMap<std::string,int> map, int nr, const char *name);
  Handle reverseLookup(QMap<Handle,int> map, int nr, const char *name);

  // Maps - will be populated after a call of translateModel
  // All map to the CONTAM index (1,2,...,nElement)
  std::map<std::string,int> m_afeMap;  // Map from descriptor ("exterior", "floor", etc.) to CONTAM airflow element index
  QMap <Handle, int> m_levelMap;      // Building story to level map by handle
  std::map <Handle, int> m_zoneMap;       // Thermal zone to airflow zone map by handle
  //QMap <std::string, int> volumeMap; // Map of AHS volumes - may not be needed
  QMap <std::string, int> m_pathMap;  // AHS paths stored by name
  std::map <Handle, int> m_surfaceMap;    // Surface paths stored by handle
  QMap <Handle, int> m_ahsMap;        // Airloop to AHS map by handle
  */

  /*
  CvFile m_cvf;
  boost::optional<openstudio::DateTime> m_startDateTime;
  boost::optional<openstudio::DateTime> m_endDateTime;
  boost::optional<std::string> m_leakageDescriptor;
  boost::optional<double> m_flow;
  boost::optional<double> m_n;
  boost::optional<double> m_deltaP;
  double m_returnSupplyRatio;
  bool m_ratioOverride;
  bool m_translateHVAC;
  */

  ProgressBar* m_progressBar;

  StringStreamLogSink m_logSink;

  REGISTER_LOGGER("openstudio.airflow.SpaceLinker");
};

} // contam
} // openstudio

#endif // CONTAM_FORWARDTRANSLATOR_HPP
