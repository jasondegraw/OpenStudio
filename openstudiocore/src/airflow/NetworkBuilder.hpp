/**********************************************************************
*  Copyright (c) 2008-2014, Alliance for Sustainable Energy.
*  All rights reserved.
*
*  This library is free software; you can redistribute it and/or
*  modify it under the terms of the GNU Lesser General Public
*  License as published by the Free Software Foundation; either
*  version 2.1 of the License, or (at your option) any later version.
*
*  This library is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*  Lesser General Public License for more details.
*
*  You should have received a copy of the GNU Lesser General Public
*  License along with this library; if not, write to the Free Software
*  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
**********************************************************************/

#ifndef AIRFLOW_NETWORKBUILDER_HPP
#define AIRFLOW_NETWORKBUILDER_HPP

#include "AirflowAPI.hpp"

//#include "../model/Model.hpp"
#include "../utilities/idf/Handle.hpp"
#include "../utilities/core/Path.hpp"
#include "../utilities/core/Optional.hpp"
#include "../utilities/core/Logger.hpp"
#include "../utilities/core/StringStreamLogSink.hpp"
#include "../model/Surface.hpp"
#include "../model/Surface_Impl.hpp"
//#include <utilities/data/TimeSeries.hpp>
//#include <utilities/time/Date.hpp>
//#include <utilities/filetypes/EpwFile.hpp>

namespace openstudio{
class ProgressBar;

namespace model {
class Model;
class ModelObject;
class Space;
class ThermalZone;
}

namespace airflow{

/** NetworkBuilder objects translates an OpenStudio model into a CONTAM model.
 *
 *  ForwardTranslator translates an OpenStudio energy model into a CONTAM
 *  airflow model using a streamlined approach. Each wall is assigned an
 *  overall leakage rate and individual components are not directly represented.
 *
 */
class AIRFLOW_API NetworkBuilder
{
public:
  /** @name Constructors and Destructors */
  //@{
  /** Construct a new object. */
  explicit NetworkBuilder(ProgressBar *progressBar=0);
  /** Destroy the translator.*/
  ~NetworkBuilder(){}

  //@}
  /** @name Network Construction Functions */
  //@{

  bool NetworkBuilder::build(model::Model & model);

  //@}
  /** @name Surface-Finding Functions */
  //@{

  static std::vector<openstudio::model::Surface> getInteriorZoneSurfaces(openstudio::model::Model & model);
  static std::vector<openstudio::model::Surface> getExteriorZoneSurfaces(openstudio::model::Model & model);

  //virtual bool getSurfaces(openstudio::model::Model & model);

  //@}
  /** @name Getters and Setters */
  //@{

  /** Returns the progress bar currently associated with the object. */
  ProgressBar * progressBar() const;

  /** Sets the progress bar to be updated by the object. */
  void setProgressBar(ProgressBar *progressBar);

  //@}
  /** @name Miscellaneous Functions */
  //@{

  /** Clear any internally stored information in the builder object. */
  virtual void clear()
  {
  }

  /** Returns true if interior subsurfaces will be linked. */
  virtual bool interiorSubSurfacesLinked() const
  {
    return true;
  }

  /** Returns true if exterior subsurfaces will be linked. */
  virtual bool exteriorSubSurfacesLinked() const
  {
    return true;
  }

  /** Returns warning messages generated by the last translation. */
  std::vector<LogMessage> warnings() const;

  /** Returns error messages generated by the last translation. */
  std::vector<LogMessage> errors() const;

  /** Returns error messages generated by the last translation. */
  std::vector<LogMessage> logMessages() const;

  //@}

protected:
  void progress();
  void initProgress(int max, std::string label);

  virtual bool linkExteriorSurface(openstudio::model::ThermalZone zone, openstudio::model::Space space, openstudio::model::Surface surface);
  virtual bool linkExteriorSubSurface(openstudio::model::ThermalZone zone, openstudio::model::Space space, openstudio::model::Surface surface, openstudio::model::SubSurface subSurface);
  virtual bool linkInteriorSurface(openstudio::model::ThermalZone zone, openstudio::model::Space space, openstudio::model::Surface surface, 
    openstudio::model::Surface adjacentSurface, openstudio::model::Space adjacentSpace, openstudio::model::ThermalZone adjacentZone);
  virtual bool linkInteriorSubSurface(openstudio::model::ThermalZone zone, openstudio::model::Space space, openstudio::model::Surface surface, openstudio::model::SubSurface subSurface,
    openstudio::model::SubSurface adjacentSubSurface, openstudio::model::Surface adjacentSurface, openstudio::model::Space adjacentSpace, openstudio::model::ThermalZone adjacentZone);

private:
  ProgressBar* m_progressBar;
  StringStreamLogSink m_logSink;

  REGISTER_LOGGER("openstudio.airflow.NetworkBuilder");
};

} // airflow
} // openstudio

#endif // AIRFLOW_NETWORKBUILDER_HPP
